import { Post } from "@/shared/interfaces/post";
import { tags } from "../BlogTags";

const post: Post = {
  title: `자바스크립트 정규식`,
  time: "241217_1",
  tags: [tags.javaScript],
  content: `
    > 문자열에서 특정 패턴을 찾거나, 치환, 추출하는 데 사용되는 \`도구\`

    ## 정규식 작성 방법

    1. **리터럴 표기법**  
      슬래시 \`/\`로 감싸서 정규식을 작성합니다.
      \`\`\`
      const regex = /pattern/;
      \`\`\`
    2. **RegExp 객체 생성자**  
      동적으로 정규식을 만들 때 사용합니다.
      \`\`\`
      const regex = new RegExp("pattern");
      \`\`\`

    ---

    ## 정규식 플래그

    정규식 뒤에 **플래그**를 붙여서 동작을 변경할 수 있습니다.

    | 플래그 | 의미                          |
    |--------|-------------------------------|
    | g    | 전역 검색 (global)            |
    | i    | 대소문자 구분 없이 검색 (ignore case) |
    | m    | 여러 줄 검색 (multi-line)     |
    | s    | 줄바꿈 문자도 포함하여 검색 |
    | u    | 유니코드 모드 사용 (unicode)   |
    | y    | 대상 문자열에서 "sticky"하게 검색 |

    ### 예시:
    \`\`\`
    const regex = /hello/gi;
    console.log("Hello hello!".match(regex)); // ['Hello', 'hello']
    \`\`\`

    ---

    ## 정규식 패턴

    정규식의 각 패턴은 특정한 의미를 가지고 있습니다.

    ### **1) 문자 클래스**

    | 패턴   | 설명                               |
    |--------|------------------------------------|
    | \`.\`    | 개행문자를 제외한 모든 문자 (any)    |
    | \`\d\`   | 숫자 (\`0-9\`)                       |
    | \`\D\`   | 숫자가 아닌 문자                   |
    | \`\w\`   | 영숫자 문자 (\`a-z, A-Z, 0-9, _\`)   |
    | \`\W\`   | 영숫자가 아닌 문자                 |
    | \`\s\`   | 공백 문자 (스페이스, 탭 등)         |
    | \`\S\`   | 공백이 아닌 문자                   |
    | \`[...]\`| 괄호 안에 있는 문자 중 하나         |
    | \`[^...]\`| 괄호 안에 없는 문자 중 하나         |

    **예시**:
    \`\`\`
    const regex = /\d/; // 숫자 찾기
    console.log("abc123".match(regex)); // ['1']
    \`\`\`

    ---

    ### **2) 반복 패턴**

    | 패턴    | 설명                              |
    |---------|-----------------------------------|
    | *     | 0회 이상 반복                     |
    | +     | 1회 이상 반복                     |
    | ?     | 0회 또는 1회                      |
    | {n}   | 정확히 n회 반복                 |
    | {n,}  | n회 이상 반복                   |
    | {n,m} | n회 이상 m회 이하 반복        |

    **예시**:
    \`\`\`
    const regex = /\d{2,4}/;
    console.log("123 45 6789".match(regex)); // ['123', '6789']
    \`\`\`

    ---

    ### **3) 앵커와 경계**

    | 패턴   | 설명                                  |
    |--------|---------------------------------------|
    | ^    | 문자열의 시작                        |
    | $    | 문자열의 끝                          |
    | \b   | 단어의 경계                          |
    | \B   | 단어의 경계가 아닌 곳                |

    **예시**:
    \`\`\`
    const regex = /^hello/;
    console.log("hello world".match(regex)); // ['hello']
    \`\`\`

    ---

    ### **4) 그룹과 캡처**

    | 패턴        | 설명                         |
    |-------------|------------------------------|
    | (...)     | 그룹화 (캡처)                 |
    | (?:...)   | 그룹화 (캡처하지 않음)        |
    | \\1, \\2... | 이전 그룹 재참조             |

    **예시**:
    \`\`\`
    const regex = /(hello)\\s\\1/;
    console.log("hello hello".match(regex)); // ['hello hello', 'hello']
    \`\`\`

    ---

    ## 문자열 메서드와 정규식

    1. **\`match()\`**: 패턴과 일치하는 모든 결과를 배열로 반환
      \`\`\`
      "abc123".match(/\d/g); // ['1', '2', '3']
      \`\`\`
    2. **\`replace()\`**: 패턴과 일치하는 부분을 다른 문자열로 교체
      \`\`\`
      "hello world".replace(/world/, "JS"); // 'hello JS'
      \`\`\`
    3. **\`test()\`**: 패턴과 일치하면 \`true\` 반환
      \`\`\`
      /hello/.test("hello world"); // true
      \`\`\`
    4. **\`exec()\`**: 일치하는 정보를 배열로 반환
      \`\`\`
      /hello/.exec("hello world"); // ['hello']
      \`\`\`

    ---

  `,
};

export default post;
