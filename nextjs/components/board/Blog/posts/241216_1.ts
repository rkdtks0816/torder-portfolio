import { Post } from "@/shared/interfaces/post";
import { tags } from "../BlogTags";

const post: Post = {
  title: `Next.js 개요`,
  time: "241216_1",
  tags: [tags.frontEnd, tags.backEnd, tags.nextJS],
  content: `
    ## React 기반 오픈 소스 웹 개발 "프레임워크"
    ### 주요 특징
    1. **서버 사이드 렌더링(SSR)**
       - React의 기본 클라이언트 사이드 렌더링(CSR) 방식 외에 서버에서 HTML을 생성하여 초기 로드 시간을 단축하고 검색엔진 최적화(SEO)를 지원합니다.    
    2. **정적 사이트 생성(SSG)**
       - 빌드 시점에 HTML을 생성해 배포하며, 빠른 로딩 속도와 높은 성능을 제공합니다.    
    3. **하이브리드 렌더링 지원**
       - 하나의 애플리케이션에서 SSR, SSG, CSR을 필요에 따라 유연하게 혼합할 수 있습니다.    
    4. **파일 기반 라우팅**
       - \`pages/\` 디렉토리의 파일 구조를 따라 자동으로 라우팅 설정이 이루어집니다.
       - 동적 라우팅과 API 라우팅도 손쉽게 구현 가능합니다.    
    5. **API 라우팅**
       - 서버리스 함수와 통합된 간단한 백엔드 API를 구현할 수 있습니다.    
    6. **이미지 최적화**
       - 빌트인 이미지 최적화 기능을 제공하여 더 나은 사용자 경험과 성능을 보장합니다.    
    7. **CSS 및 스타일링**
       - CSS, Sass, CSS-in-JS(Styled-Components, Emotion 등) 등 다양한 스타일링 옵션을 지원합니다.    
    8. **TypeScript 지원**
       - 기본적으로 TypeScript와 통합되어 타입 안전성을 높이고 개발자 경험을 향상시킵니다.    
    9. **자동 코드 분할**
       - 페이지별로 필요한 JavaScript만 로드하여 애플리케이션 성능을 최적화합니다.    
    10. **개발자 경험(DX)**
        - 핫 리로딩, 유용한 디버깅 정보 등 개발 생산성을 높이는 다양한 기능이 포함되어 있습니다.
            
    ---
    
    ### 장점
    - **SEO 최적화**: 서버에서 렌더링된 콘텐츠를 제공하여 검색 엔진에 유리.
    - **빠른 로딩 속도**: 정적 사이트 생성과 코드 분할로 성능 극대화.
    - **유연성**: SSR, SSG, CSR 모두 지원.
    - **생태계 통합**: React, Vercel, 다양한 라이브러리와 쉽게 연동 가능.
    
    ---
    
    ### 단점
    - **학습 곡선**: React와 기본 웹 개발 개념에 익숙하지 않으면 처음에는 복잡할 수 있음.
    - **서버 관리 필요**: SSR을 사용할 경우 서버 환경 설정이 추가로 필요.
  `,
};

export default post;
