import { Post } from "@/shared/types/post";
import { tags } from "../BlogTags";

const post: Post = {
  title: `자바스크립트 반복문`,
  time: "241213_0",
  tags: [tags.algorithm, tags.javaScript, tags.loop],
  content: `      
      ## **기본 비교**
      
      | **특징**          | **\`reduce\`**                            | **\`map\`**                        | **\`forEach\`**                     | **\`for\`**                           |
      |--------------------|------------------------------------------|-----------------------------------|------------------------------------|--------------------------------------|
      | **주요 목적**      | 값을 누적하거나 변환하여 단일 결과 생성 | 배열 요소를 변환하여 새 배열 생성 | 배열 요소에 대해 작업 수행        | 일반적인 반복 작업                  |
      | **반환값**         | 누적값 (단일 값)                       | 새 배열                           | \`undefined\`                        | 없음                                |
      | **불변성 유지**    | 적합                                   | 적합                              | 직접 요소 수정 가능                 | 직접 요소 수정 가능                  |
      | **성능**          | 배열 메서드라 일반적으로 느림            | 배열 메서드라 일반적으로 느림      | 배열 메서드라 일반적으로 느림       | 반복문 직접 제어로 일반적으로 빠름  |
      | **중간 종료 가능** | 불가능                                  | 불가능                             | 불가능                              | 가능 (\`break\` 사용)                 |
      
      ---
      
      ## **개별 설명 및 예제**
      
      ### 2.1 **\`reduce\`**
      - **목적**: 배열을 순회하며 값을 누적하여 단일 결과를 생성.
      - **특징**: 이전 결과(\`accumulator\`)를 기반으로 계산을 이어 나감.
      - **사용 사례**:
        - 배열 합계 계산.
        - 배열을 객체나 다른 형태로 변환.
      
      \`\`\`
      const numbers = [1, 2, 3, 4];
      const sum = numbers.reduce((acc, num) => acc + num, 0); // 초기값: 0
      console.log(sum); // 10
      \`\`\`
      
      #### 장단점:
      | 장점                                    | 단점                                       |
      |-----------------------------------------|--------------------------------------------|
      | 복잡한 데이터 변환, 집계에 강력함        | 초기값 설정을 생략하면 빈 배열에서 에러 발생 |
      | 단일 값 반환으로 간결한 코드 작성 가능    | 사용법이 복잡할 수 있음                    |
      
      ---
      
      ### 2.2 **\`map\`**
      - **목적**: 배열의 각 요소를 변환하여 새 배열을 생성.
      - **특징**: 원본 배열을 변경하지 않음.
      - **사용 사례**:
        - 배열 요소 변환.
        - 계산된 값으로 새 배열 생성.
      
      \`\`\`
      const numbers = [1, 2, 3, 4];
      const squared = numbers.map(num => num ** 2);
      console.log(squared); // [1, 4, 9, 16]
      \`\`\`
      
      #### 장단점:
      | 장점                                    | 단점                                       |
      |-----------------------------------------|--------------------------------------------|
      | 불변성 유지                              | 단순 작업 외에는 적합하지 않음             |
      | 코드가 간결하고 가독성이 높음            | 중간 종료가 불가능                         |
      
      ---
      
      ### 2.3 **\`forEach\`**
      - **목적**: 배열의 각 요소에 대해 작업 수행.
      - **특징**: 반환값이 없으며, 배열을 순회하면서 부수 효과(side effect)를 발생시킴.
      - **사용 사례**:
        - 배열 요소 출력.
        - 외부 변수 변경.
        - DOM 조작 등.
      
      \`\`\`
      const numbers = [1, 2, 3, 4];
      numbers.forEach(num => console.log(num));
      // 1
      // 2
      // 3
      // 4
      \`\`\`
      
      #### 장단점:
      | 장점                                    | 단점                                       |
      |-----------------------------------------|--------------------------------------------|
      | 부수 효과 발생 작업에 적합               | 반환값이 없으므로 체이닝 불가능             |
      | 간단한 작업을 빠르게 작성 가능            | 중간 종료 불가능                            |
      
      ---
      
      ### 2.4 **\`for\`**
      - **목적**: 범용 반복문으로 배열뿐 아니라 모든 반복 작업에 사용 가능.
      - **특징**: 반복 흐름을 자유롭게 제어 (\`break\`, \`continue\` 등 사용 가능).
      - **사용 사례**:
        - 조건부 반복.
        - 인덱스 기반 작업.
        - 성능이 중요한 반복 작업.
      
      \`\`\`
      const numbers = [1, 2, 3, 4];
      for (let i = 0; i < numbers.length; i++) {
          console.log(numbers[i]);
      }
      // 1
      // 2
      // 3
      // 4
      \`\`\`
      
      #### 장단점:
      | 장점                                    | 단점                                       |
      |-----------------------------------------|--------------------------------------------|
      | 반복 흐름을 자유롭게 제어 가능            | 코드가 길어질 경우 가독성 저하             |
      | 모든 종류의 반복 작업에 사용 가능         | 실수로 인한 무한 루프 가능                 |
      
      ---
      
      ## **언제 무엇을 사용해야 할까?**
      
      | **상황**                                   | **추천 방법**      | **설명**                                                                 |
      |--------------------------------------------|--------------------|--------------------------------------------------------------------------|
      | 값을 누적하거나 집계가 필요할 때           | \`reduce\`           | 합계, 평균 계산, 배열을 객체로 변환 등 복잡한 작업.                      |
      | 배열 요소를 변환하여 새 배열이 필요한 경우 | \`map\`              | 기존 배열을 변경하지 않고 변환된 배열 생성.                              |
      | 배열 요소를 순회하며 작업만 수행할 때      | \`forEach\`          | DOM 조작, 콘솔 출력 등 부수 효과를 발생시키는 작업.                      |
      | 반복 작업을 정밀하게 제어해야 할 때        | \`for\`              | 인덱스 기반 접근, 중간 종료(\`break\`), 특정 조건부 반복 등.               |
      
      ---
      
      ## **종합 요약**
      - **\`reduce\`**: 복잡한 데이터 변환 및 집계 작업.
      - **\`map\`**: 배열을 변환하여 새 배열 생성.
      - **\`forEach\`**: 부수 효과를 수행하며 요소를 단순히 순회.
      - **\`for\`**: 자유롭고 세밀한 반복 제어가 필요한 경우.
  `,
};

export default post;
